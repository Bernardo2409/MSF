import numpy as np
import matplotlib.pyplot as plt

# ==============================================
# PARÂMETROS DO SISTEMA E FUNÇÕES BÁSICAS
# ==============================================

m = 1.0       # massa (kg)
k = 1.0       # constante elástica (N/m)
alpha = -0.01 # coeficiente cúbico (N/m²)

def U(x):
    return 0.5*k*x**2 + alpha*x**3

def F(x):
    return -k*x - 3*alpha*x**2

# ==============================================
# MÉTODO RK4 PARA SISTEMAS DE EDOs
# ==============================================

def rk4_step(f, t, y, dt):
    k1 = f(t, y)
    k2 = f(t + dt/2, y + dt/2 * k1)
    k3 = f(t + dt/2, y + dt/2 * k2)
    k4 = f(t + dt, y + dt * k3)
    return y + dt * (k1 + 2*k2 + 2*k3 + k4) / 6

def cubic_oscillator(t, y):
    x, v = y
    dxdt = v
    dvdt = F(x)/m
    return np.array([dxdt, dvdt])

# ==============================================
# CONFIGURAÇÃO DA SIMULAÇÃO
# ==============================================

dt = 0.001
t_max = 30
n_steps = int(t_max/dt)
t_values = np.linspace(0, t_max, n_steps)

# ==============================================
# PARTE a) GRÁFICO DA ENERGIA POTENCIAL
# ==============================================

x_vals = np.linspace(-8, 5, 1000)
U_vals = U(x_vals)

plt.figure(figsize=(6, 4))
plt.plot(x_vals, U_vals, linewidth=2)
plt.title("Oscilador Cúbico")
plt.xlabel("x (m)")
plt.ylabel("Energia Potencial (J)")
#limitações do gráfico
plt.xlim(-8, 4)
plt.ylim(0, 100)
plt.grid(True)
plt.tight_layout()
plt.show()

# ==============================================
# PARTE b) SIMULAÇÃO PARA x0=1.3, v0=0
# ==============================================

x0_b = 1.3
v0_b = 0

y = np.array([x0_b, v0_b])
x_values_b = np.zeros(n_steps)
v_values_b = np.zeros(n_steps)
x_values_b[0] = y[0]
v_values_b[0] = y[1]

for i in range(1, n_steps):
    y = rk4_step(cubic_oscillator, t_values[i-1], y, dt)
    x_values_b[i] = y[0]
    v_values_b[i] = y[1]

E0_b = 0.5*m*v0_b**2 + U(x0_b)
x_min_b = np.min(x_values_b)
x_max_b = np.max(x_values_b)

peaks_b = []
for i in range(1, len(x_values_b)-1):
    if x_values_b[i] > x_values_b[i-1] and x_values_b[i] > x_values_b[i+1]:
        peaks_b.append(i)

if len(peaks_b) > 2:
    T_b = np.mean(np.diff(t_values[peaks_b]))
    freq_b = 1/T_b
else:
    freq_b = np.sqrt(k/m)/(2*np.pi)

# ==============================================
# PARTE c) SIMULAÇÃO PARA x0=2.9, v0=0
# ==============================================

x0_c = 2.9
v0_c = 0

y = np.array([x0_c, v0_c])
x_values_c = np.zeros(n_steps)
v_values_c = np.zeros(n_steps)
x_values_c[0] = y[0]
v_values_c[0] = y[1]

for i in range(1, n_steps):
    y = rk4_step(cubic_oscillator, t_values[i-1], y, dt)
    x_values_c[i] = y[0]
    v_values_c[i] = y[1]

E0_c = 0.5*m*v0_c**2 + U(x0_c)
x_min_c = np.min(x_values_c)
x_max_c = np.max(x_values_c)

peaks_c = []
for i in range(1, len(x_values_c)-1):
    if x_values_c[i] > x_values_c[i-1] and x_values_c[i] > x_values_c[i+1]:
        peaks_c.append(i)

if len(peaks_c) > 2:
    T_c = np.mean(np.diff(t_values[peaks_c]))
    freq_c = 1/T_c
else:
    freq_c = np.sqrt(k/m)/(2*np.pi)

# ==============================================
# RESULTADOS FINAIS
# ==============================================

print("\nPARTE b) x₀ = 1.3 m, v₀ = 0 m/s")
print(f"Energia mecânica inicial: {E0_b:.3f} J")
print(f"Limites do movimento: {np.round(x_max_b,2)} m e {np.round(x_min_b,2)} m")
print(f"Frequência: {freq_b:.3f} Hz")

print("\nPARTE c) x₀ = 2.9 m, v₀ = 0 m/s")
print(f"Energia mecânica inicial: {E0_c:.2f} J")
print(f"Limites do movimento: {np.round(x_max_c,2)} m e {np.round(x_min_c,2)} m")
print(f"Frequência: {freq_c:.3f} Hz")

# ==============================================
# GRÁFICOS DO MOVIMENTO
# ==============================================

plt.figure(figsize=(12, 8))

plt.subplot(2, 1, 1)
plt.plot(t_values, x_values_b)
plt.title('Movimento do Oscilador Cúbico - x₀ = 1.3 m')
plt.xlabel('Tempo (s)')
plt.ylabel('Posição (m)')
plt.grid(True)

plt.subplot(2, 1, 2)
plt.plot(t_values, x_values_c)
plt.title('Movimento do Oscilador Cúbico - x₀ = 2.9 m')
plt.xlabel('Tempo (s)')
plt.ylabel('Posição (m)')
plt.grid(True)

plt.tight_layout()
plt.show()


# ==============================================
# GRÁFICOS Série de Fourier
# ==============================================
# Sinal: posição no tempo (caso b - x₀ = 2.2 m, v₀ = 0)
x_signal = x_values_b - np.mean(x_values_b)  # remove a média

# FFT
X_f = np.fft.fft(x_signal)
frequencies = np.fft.fftfreq(n_steps, dt)

# Apenas frequências positivas
mask = frequencies > 0
frequencies = frequencies[mask]
amplitudes = np.abs(X_f[mask])

# Gráfico do espectro
plt.figure(figsize=(8, 4))
plt.plot(frequencies, amplitudes, color='purple')
plt.title("Análise de Fourier do Movimento (x₀ = 2.2 m)")
plt.xlabel("Frequência (Hz)")
plt.ylabel("Amplitude")
plt.grid(True)
plt.xlim(0, 2)  # podes ajustar para ver melhor os picos relevantes
plt.tight_layout()
plt.show()


